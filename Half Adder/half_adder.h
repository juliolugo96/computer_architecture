#include <and.h>
#include <xor.h>

#ifndef HALF_ADDER
#define HALF_ADDER

SC_MODULE (hadd) {
  /*
    As√≠ como pueden crear una puerta l√≥gica en el main,
    pueden crearla aqu√≠ como un miembro de una clase,
    despu√©s de todo son tan solo una clase (un tipo de dato)
    y pueden componer √©sta clase de otras, como hicieron en PR2.
  */

  And* ag;
  Xor* xg;
  sc_in<bool> a;
  sc_in<bool> b;
  sc_out<bool> c;
  sc_out<bool> s;

  /*
    La raz√≥n por la que creo las clases And y Xor como apuntadores es porque no
    podemos iniciar las clases con un constructor por par√°metros al declarar los
    miembros de la clase y como And y Xor por seguridad no tienen constructores
    sin par√°metros, declaramos mejor apuntadores y luego llamamos a los constructores

    ... √©sto podr√≠a hacerse sin apuntadores, pero ser√≠a un rollo grand√≠simo, as√≠ que
    apliquen el principio KISS y usen apuntadores, pues es mucho m√°s sencillo üòÅüëç
    ... aunque prefiero m√°s escribir KIS (sin la s de "stupid" para no ofender a nadie)
  */

  ///Si no conoc√≠an el principio KISS, significa "Keep It Simple, Stupid!"

  SC_CTOR (hadd) {
    /*
      No s√© si han usado apuntadores a clases, pero para usar la clase a trav√©s de un
      apuntador, lo que necesitan es apartar la memoria (se hace sencillamente usando new)
      de la clase que crear√°n (por ejemplo: And("aquicolocanloquesea") )
    */
    ag = new And("and_gate");
    ag->a(a);
    ag->b(b);
    ag->c(c);

    xg = new Xor("xor_gate");
    xg->a(a);
    xg->b(b);
    xg->c(s);

    /*
      Notar√°n que no he escrito "SC_METHOD(m√©todo)" porque √©sta clase no har√° uso de m√©todos,
      solo necesitar√° que conecten entradas y salidas üòÅ
    */
    /*
      Otra cosa importante a resaltar es que no us√© se√±ales (signals) y es porque no hizo falta...
      En clase les mostrar√© cu√°ndo hay que usar se√±ales
    */
  }

  ~hadd() {
    delete ag;
    delete xg;
  }
};

#endif//HALF_ADDER
